import google.generativeai as genai
import base64
import json
import logging
from utils.config import GEMINI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API-–∫–ª—é—á–∞
genai.configure(api_key=GEMINI_API_KEY)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å "models/"
MODEL_NAME = "models/gemini-2.0-flash"

def check_available_models():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    try:
        available_models = genai.list_models()
        model_names = [model.name for model in available_models]
        logging.debug(f"üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {model_names}")
        if MODEL_NAME not in model_names:
            logging.error(f"‚ùå –ú–æ–¥–µ–ª—å {MODEL_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {model_names}")
            return False
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        return False

def analyze_image_with_gemini(image_data, mime_type):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Gemini AI –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞."""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
    if not check_available_models():
        return {"status": "error", "message": f"–ú–æ–¥–µ–ª—å {MODEL_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."}

    image_base64 = base64.b64encode(image_data).decode("utf-8")

    model = genai.GenerativeModel(MODEL_NAME)

    payload = {
        "parts": [
            {
                "text": "–û–ø—Ä–µ–¥–µ–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é. "
                        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: "
                        '{"diagnosis": "–∑–¥–æ—Ä–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ" –∏–ª–∏ "–Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏", '
                        '"recommendation": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —É—Ö–æ–¥—É"}'
            },
            {
                "inline_data": {
                    "mime_type": mime_type,
                    "data": image_base64
                }
            }
        ]
    }

    try:
        response = model.generate_content(payload)

        # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª Gemini
        logging.debug(f"üîç –û—Ç–≤–µ—Ç –æ—Ç Gemini (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ): {response.text}")

        if response and response.text:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON
            try:
                parsed_response = json.loads(response.text)
                return parsed_response
            except json.JSONDecodeError:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç Gemini")
                return {"status": "error", "message": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON."}
        else:
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini."}
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini: {str(e)}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini: {str(e)}"}
