# services/gemini.py
from datetime import datetime
import os
import json
import requests
import base64
import re
from dotenv import load_dotenv
from typing import Optional

load_dotenv()

# üîê API config
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_API_URL = os.getenv("GEMINI_API_URL") or \
    "https://generativelanguage.googleapis.com/v1/models/gemini-2.0-pro-vision:generateContent"

headers = {
    "Content-Type": "application/json"
}

# üì§ Gemini API call without image (for text-only prompts)
def call_gemini_api(prompt: str) -> str:
    body = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    response = requests.post(
        f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
        headers=headers,
        json=body
    )
    response.raise_for_status()
    result = response.json()
    return result['candidates'][0]['content']['parts'][0]['text']

# üì§ Gemini API call with image data (image must be in bytes)
def call_gemini_api_with_image(image_bytes: bytes, prompt: str) -> str:
    image_base64 = base64.b64encode(image_bytes).decode("utf-8")

    body = {
        "contents": [
            {
                "parts": [
                    {"text": prompt},
                    {
                        "inline_data": {
                            "mime_type": "image/jpeg",
                            "data": image_base64
                        }
                    }
                ]
            }
        ]
    }
    response = requests.post(
        f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
        headers=headers,
        json=body
    )
    response.raise_for_status()
    result = response.json()
    return result['candidates'][0]['content']['parts'][0]['text']

# üì• Parse Gemini response (fallback if JSON fails)
def parse_gemini_json_response(response: str) -> dict:
    try:
        data = json.loads(response)
        return {
            "recommendation": data.get("recommendation", response),
            "next_watering_in_days": data.get("next_watering_in_days", 3),
            "next_watering_date": data.get("next_watering_date")
        }
    except json.JSONDecodeError:
        match = re.search(r"(\d{4}-\d{2}-\d{2})", response)
        return {
            "recommendation": response,
            "next_watering_in_days": 3,
            "next_watering_date": match.group(1) if match else None
        }


# üß† Prompt for image-based analysis
def get_photo_prompt(
    plant_name: str,
    plant_type: str,
    previous_interval: Optional[int] = None,
    last_watered: Optional[datetime] = None
) -> str:
    memory_parts = []
    if previous_interval:
        memory_parts.append(f"–†–∞–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞: {previous_interval} –¥–Ω–µ–π.")
    if last_watered:
        memory_parts.append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª: {last_watered.strftime('%Y-%m-%d')}.")

    memory = "\n".join(memory_parts)

    return f"""
–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é —Ä–∞—Å—Ç–µ–Ω–∏–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ \"{plant_name}\" (—Ç–∏–ø: {plant_type}).

–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å–∞.

{memory}

–í–µ—Ä–Ω–∏ JSON –æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
- \"recommendation\": —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É
- \"next_watering_in_days\": —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–ª–∏—Ç—å
- \"next_watering_date\": —Å–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞ –ø–æ–ª–∏–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD

–ü—Ä–∏–º–µ—Ä:
{{
  "recommendation": "–†–∞—Å—Ç–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç—Ä–µ—Å—Å–∞ –æ—Ç —Å–æ–ª–Ω—Ü–∞. –£–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ —Ç–µ–Ω—å. –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ —á–µ—Ä–µ–∑ 4 –¥–Ω—è.",
  "next_watering_in_days": 4,
  "next_watering_date": "2025-04-25"
}}
"""

# üß† Prompt for combined sensor + image + weather analysis
def get_combined_prompt(
    plant_name: str,
    plant_type: str,
    sensors,
    weather: dict = None,
    previous_interval: Optional[int] = None,
    last_watered: Optional[datetime] = None
) -> str:
    memory = []
    if previous_interval:
        memory.append(f"–†–∞–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞: {previous_interval} –¥–Ω–µ–π.")
    if last_watered:
        memory.append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª: {last_watered.strftime('%Y-%m-%d')}.")

    memory_block = "\n".join(memory)

    weather_part = ""
    if weather:
        weather_part = f"""
–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ:
- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {weather['city']}, {weather['country']}
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp_c']}¬∞C
- –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%
- –ò–Ω–¥–µ–∫—Å –∂–∞—Ä—ã: {weather['heat_index_c']}¬∞C
- –£–§-–∏–Ω–¥–µ–∫—Å: {weather['uv_index']}
"""

    return f"""
–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º {plant_name}, —Ç–∏–ø: {plant_type}.

{memory_block}

–î–∞–Ω–Ω—ã–µ —Å —Å–µ–Ω—Å–æ—Ä–æ–≤:
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {sensors.temperature}¬∞C
- –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {sensors.humidity}%
- –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {sensors.soil_moisture}
- –û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å: {sensors.light} –ª—é–∫—Å
- –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (–≥–∞–∑–∞): {sensors.gas_quality}
{weather_part}

–í–µ—Ä–Ω–∏ JSON –æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
- \"recommendation\": —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É
- \"next_watering_in_days\": —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–ª–∏—Ç—å
- \"next_watering_date\": —Å–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞ –ø–æ–ª–∏–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD

–ü—Ä–∏–º–µ—Ä:
{{
  "recommendation": "–ò—Å—Ö–æ–¥—è –∏–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –Ω–∏–∑–∫–∞—è, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–≤–µ—Ç–∞. –ü–æ–ª–µ–π—Ç–µ —Å–µ–≥–æ–¥–Ω—è –∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 3 –¥–Ω—è. –£–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ —Ç–µ–Ω—å",
  "next_watering_in_days": 3,
  "next_watering_date": "2025-04-25"
}}
"""
