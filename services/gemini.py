# services/gemini.py

from datetime import datetime
import os
import json
import requests
from dotenv import load_dotenv
from typing import Optional
import base64

load_dotenv()

# üîê API config
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_API_URL = os.getenv("GEMINI_API_URL") or \
    "https://generativelanguage.googleapis.com/v1/models/gemini-2.0-pro-vision:generateContent"

headers = {
    "Content-Type": "application/json"
}

def call_gemini_api(prompt: str) -> str:
    body = {
        "contents": [{"parts": [{"text": f"{prompt}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}]}]
    }
    response = requests.post(
        f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
        headers=headers,
        json=body
    )
    response.raise_for_status()
    result = response.json()
    return result['candidates'][0]['content']['parts'][0]['text']

def call_gemini_api_with_image(image_bytes: bytes, prompt: str) -> str:
    image_base64 = base64.b64encode(image_bytes).decode("utf-8")

    body = {
        "contents": [
            {
                "parts": [
                    {
                        "inline_data": {
                            "mime_type": "image/jpeg",
                            "data": image_base64
                        }
                    },
                    {
                        "text": f"{prompt}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                    }
                ]
            }
        ]
    }

    response = requests.post(
        f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",
        headers=headers,
        json=body
    )
    response.raise_for_status()
    result = response.json()
    return result['candidates'][0]['content']['parts'][0]['text']

def parse_gemini_json_response(response: str) -> dict:
    try:
        return json.loads(response)
    except json.JSONDecodeError:
        return {
            "recommendation": response,
            "next_watering_in_days": 3,
            "next_watering_date": None
        }

def get_photo_prompt(
    plant_name: str,
    plant_type: str,
    previous_interval: Optional[int] = None,
    last_watered: Optional[datetime] = None
) -> str:
    memory_parts = []

    if previous_interval:
        memory_parts.append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞ –±—ã–ª {previous_interval} –¥–Ω–µ–π.")
    if last_watered:
        memory_parts.append(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤ –±—ã–ª {last_watered.strftime('%Y-%m-%d')}.")

    memory = "\n".join(memory_parts)

    return f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ "{plant_name}" (—Ç–∏–ø: {plant_type}).
–ò—â–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–æ–ª–µ–∑–Ω–∏, –æ–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å–∞.

{memory}

–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç:
- "recommendation": —Ç–≤–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —É—Ö–æ–¥—É
- "next_watering_in_days": —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–ª–∏–≤–∞—Ç—å
- "next_watering_date": —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD

–ü—Ä–∏–º–µ—Ä:
{{
  "recommendation": "–†–∞—Å—Ç–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∑–¥–æ—Ä–æ–≤—ã–º. –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ —á–µ—Ä–µ–∑ 4 –¥–Ω—è.",
  "next_watering_in_days": 4,
  "next_watering_date": "2025-04-25"
}}
"""

def get_combined_prompt(plant_name: str, sensors, weather: dict = None, previous_interval: Optional[int] = None) -> str:
    memory = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞ –±—ã–ª {previous_interval} –¥–Ω–µ–π.\n" if previous_interval else ""

    weather_part = ""
    if weather:
        weather_part = f"""
–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ:
- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {weather['city']}, {weather['country']}
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp_c']}¬∞C
- –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%
- –ò–Ω–¥–µ–∫—Å –∂–∞—Ä—ã: {weather['heat_index_c']}¬∞C
- –£–§-–∏–Ω–¥–µ–∫—Å: {weather['uv_index']}
"""

    return f"""
–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º "{plant_name}".

{memory}

–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤:
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {sensors.temperature}¬∞C
- –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {sensors.humidity}%
- –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {sensors.soil_moisture}
- –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: {sensors.light} lux
- –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {sensors.gas_quality}
{weather_part}

–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç:
- "recommendation": —Ç–≤–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
- "next_watering_in_days": —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–ª–∏–≤–∞—Ç—å
- "next_watering_date": —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD

–ü—Ä–∏–º–µ—Ä:
{{
  "recommendation": "–ü–æ—á–≤–∞ —Å—É—Ö–∞—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–∏–≤ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —á–µ—Ä–µ–∑ 3 –¥–Ω—è.",
  "next_watering_in_days": 3,
  "next_watering_date": "2025-04-25"
}}
"""
